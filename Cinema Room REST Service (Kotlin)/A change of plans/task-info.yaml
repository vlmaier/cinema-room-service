type: edu
files:
- name: src/cinema/Application.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication

    @SpringBootApplication
    open class Application

    fun main(args: Array<String>) {
        runApplication<Application>(*args)
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.ApplicationKt;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(ApplicationKt.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.kt
  visible: true
  text: |-
    package cinema.model

    import com.fasterxml.jackson.annotation.JsonProperty

    data class Seat (
        val row: Int,
        @JsonProperty("column")
        val number: Int,
        val price: Int,
    )

    fun Seat.toTicket(): Ticket {
        return Ticket(
            row = row,
            number = number,
            price = price,
        )
    }
  learner_created: true
- name: src/cinema/model/Room.kt
  visible: true
  text: |-
    package cinema.model

    import com.fasterxml.jackson.annotation.JsonProperty

    data class Room(
        @JsonProperty("total_rows")
        val totalRows: Int,
        @JsonProperty("total_columns")
        val seatsPerRow: Int,
        @JsonProperty("available_seats")
        val availableSeats: List<Seat>,
    )
  learner_created: true
- name: src/cinema/model/ErrorInfo.kt
  visible: true
  text: |
    package cinema.model

    import com.fasterxml.jackson.annotation.JsonProperty

    data class ErrorInfo(
        @JsonProperty("error")
        val message: String,
    )
  learner_created: true
- name: src/cinema/model/TicketRequest.kt
  visible: true
  text: |
    package cinema.model

    import com.fasterxml.jackson.annotation.JsonProperty

    data class TicketRequest(
        val row: Int,
        @JsonProperty("column")
        val number: Int,
    )
  learner_created: true
- name: src/cinema/error/UnavailableSeatException.kt
  visible: true
  text: |
    package cinema.error

    class UnavailableSeatException(message: String) : RuntimeException(message)
  learner_created: true
- name: src/cinema/error/InvalidSeatException.kt
  visible: true
  text: |
    package cinema.error

    class InvalidSeatException(message: String) : RuntimeException(message)
  learner_created: true
- name: src/cinema/error/ExceptionHandler.kt
  visible: true
  text: |
    package cinema.error

    import cinema.model.ErrorInfo
    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity

    import org.springframework.web.bind.annotation.ExceptionHandler
    import org.springframework.web.bind.annotation.RestControllerAdvice
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler

    @RestControllerAdvice
    class ExceptionHandler : ResponseEntityExceptionHandler() {

        @ExceptionHandler(UnavailableSeatException::class, InvalidSeatException::class)
        fun onInvalidSeatException(e: RuntimeException): ResponseEntity<ErrorInfo> {
            val error = ErrorInfo(
                message = e.message ?: ""
            )
            return ResponseEntity(error, HttpStatus.BAD_REQUEST)
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.kt
  visible: true
  text: |
    package cinema.service

    import cinema.error.InvalidSeatException
    import cinema.error.UnavailableSeatException
    import cinema.model.Room
    import cinema.model.Seat
    import cinema.model.Ticket
    import cinema.model.toTicket
    import org.springframework.stereotype.Service

    @Service
    class CinemaService {

        private val bookedSeats = mutableListOf<Seat>()
        private val availableSeats = mutableListOf<Seat>()

        init {
            val seatsPerRow = 1..SEATS_PER_ROW
            val totalRows = 1..TOTAL_ROWS
            for (row in totalRows) {
                for (number in seatsPerRow) {
                    val price = calculatePrice(row)
                    availableSeats.add(Seat(row, number, price))
                }
            }
        }

        fun getRoom(): Room {
            return Room(
                totalRows = availableSeats.map { it.row }.maxOf { it },
                seatsPerRow = availableSeats.map { it.number }.maxOf { it },
                availableSeats = availableSeats,
            )
        }

        fun purchaseTicket(row: Int, number: Int): Ticket {
            if (!isSeatValid(row, number)) {
                throw InvalidSeatException("The number of a row or a column is out of bounds!")
            }
            if (!isSeatAvailable(row, number)) {
                throw UnavailableSeatException("The ticket has been already purchased!")
            }
            val seat = findSeat(row, number)!!
            bookedSeats.add(seat)
            availableSeats.remove(seat)
            return seat.toTicket()
        }

        private fun isSeatValid(row: Int, number: Int): Boolean {
            if (row < 0 || number < 0) {
                return false
            }
            return !(row > TOTAL_ROWS || number > SEATS_PER_ROW)
        }

        private fun isSeatAvailable(row: Int, number: Int): Boolean {
            return findSeat(row, number) != null
        }

        private fun calculatePrice(row: Int): Int {
            val price = BASE_PRICE
            if (row > LAST_FRONT_ROW) {
                return price
            }
            return price + FRONT_ROW_CHARGE
        }

        private fun findSeat(row: Int, number: Int): Seat? {
            return availableSeats.find { it.row == row && it.number == number }
        }
    }

    private const val SEATS_PER_ROW = 9
    private const val TOTAL_ROWS = 9
    private const val LAST_FRONT_ROW = 4
    private const val BASE_PRICE = 8
    private const val FRONT_ROW_CHARGE = 2
  learner_created: true
- name: src/cinema/model/Ticket.kt
  visible: true
  text: |
    package cinema.model

    import com.fasterxml.jackson.annotation.JsonProperty

    data class Ticket(
        val row: Int,
        @JsonProperty("column")
        val number: Int,
        val price: Int,
    )
  learner_created: true
- name: src/cinema/model/Purchase.kt
  visible: true
  learner_created: true
- name: src/cinema/controller/CinemaController.kt
  visible: true
  text: |-
    package cinema

    import cinema.model.Room
    import cinema.model.Ticket
    import cinema.model.TicketRequest
    import cinema.service.CinemaService
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.RequestBody
    import org.springframework.web.bind.annotation.RestController

    @RestController
    class CinemaController(
        private val cinemaService: CinemaService,
    ) {
        @GetMapping("/seats")
        fun getSeats(): Room {
            return cinemaService.getRoom()
        }

        @PostMapping("/purchase")
        fun purchaseTicket(
            @RequestBody request: TicketRequest,
        ): Ticket {
            return cinemaService.purchaseTicket(request.row, request.number)
        }
    }
  learner_created: true
- name: src/cinema/error/InvalidTokenException.kt
  visible: true
  learner_created: true
- name: src/cinema/model/Return.kt
  visible: true
  learner_created: true
- name: src/cinema/model/ReturnRequest.kt
  visible: true
  learner_created: true
- name: src/cinema/model/Stats.kt
  visible: true
  learner_created: true
- name: src/cinema/error/UnauthorizedException.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20459#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 22 Apr 2023 11:15:59 UTC"
record: 3
